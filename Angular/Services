 /**
  * Function to Check Reset Password Token
  */ 
   checkResetPasswordToken(apiFor:string,token:string): Observable<any> {
    return this.http.get(`${API_URL}${apiFor}/password/find/${token}`);
  }

  /**
  * Function to User Reset Password 
  */ 
   resetPassword(apiFor:string,data:any): Observable<any> {
    return this.http.post(`${API_URL}${apiFor}/password/reset`, data);
  }  

   /**
   * Function to set user auth token in local storage
   */  
  setAuthFromLocalStorage(auth: any): boolean {
    // store auth authToken/refreshToken/epiresIn in local storage to keep user logged in between page refreshes
    if (auth && auth.authToken) {
      localStorage.setItem(this.authLocalStorageToken, JSON.stringify(auth));
      return true;
    }
    return false;
  }

  /**
  * Function to get user auth token from local storage
  */
  getAuthFromLocalStorage() {
    try {
      const authData:any =  localStorage.getItem(this.authLocalStorageToken);
      return JSON.parse(authData);
    } catch (error) {
      console.error(error);
      return undefined;
    }
  }

  /**
  * Function to remove user auth token from local storage
  */
  removeTokenFromLocalStorage(){
    localStorage.removeItem(this.authLocalStorageToken);
  }

  /**
  * Function to login Employer
  */ 
  login(data:any): Observable<any> {
    return this.http.post(`${API_URL}/login`, data);
  }

  /**
  * Function to Signup Employer
  */ 
  signup(data:any): Observable<any> {
    return this.http.post(`${API_URL}/signup`, data);
  }